"""
Page de visualisation du r√©seau FTL
Interface Streamlit pour afficher graphiquement les connexions FTL entre syst√®mes
"""

import streamlit as st
import json
import os
from streamlit_agraph import agraph, Node, Edge, Config
import plotly.graph_objects as go
import plotly.express as px
import networkx as nx
from typing import Dict, List, Tuple

def load_ftl_data():
    """Charge les donn√©es du r√©seau FTL depuis le fichier JSON"""
    ftl_file = os.path.join(os.path.dirname(__file__), "..", "univers_eneria_reseau_ftl.json")
    
    if not os.path.exists(ftl_file):
        st.error(f"‚ùå Fichier de donn√©es FTL non trouv√©: {ftl_file}")
        return None
    
    try:
        with open(ftl_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement des donn√©es FTL: {e}")
        return None

def create_network_graph(data: Dict, show_private: bool = True, max_distance: int = None) -> Tuple[List[Node], List[Edge]]:
    """
    Cr√©e les n≈ìuds et ar√™tes pour le graphique de r√©seau
    
    Args:
        data: Donn√©es FTL charg√©es depuis le JSON
        show_private: Si True, affiche les liens priv√©s
    
    Returns:
        Tuple contenant (nodes, edges)
    """
    nodes = []
    edges = []
    
    # Cr√©er les n≈ìuds (syst√®mes)
    systems = data.get('systems', {})
    for system_name, system_data in systems.items():
        # Taille du n≈ìud proportionnelle au nombre de connexions
        size = min(30 + system_data.get('connections_count', 0) * 3, 60)
        
        node = Node(
            id=system_name,
            label=system_name,
            size=size,
            color="#4A90E2",  # Bleu pour tous les syst√®mes
            font={"size": 14, "color": "#FFFFFF"},
            shape="dot"
        )
        nodes.append(node)
    
    # Cr√©er les ar√™tes (connexions)
    connections = data.get('connections', [])
    edge_id = 0
    
    for conn in connections:
        # V√©rifier si on doit afficher les liens priv√©s
        is_private = conn.get('prive', False) or conn.get('status', '').lower().find('priv√©e') >= 0
        if is_private and not show_private:
            continue
        
        # Filtrer par distance si sp√©cifi√©
        distance = conn.get('distance', 5)
        if max_distance and distance > max_distance:
            continue
        
        # Couleur selon le type de connexion
        if is_private:
            color = "#FF6B6B"  # Rouge pour les liens priv√©s
            width = 2
            dashes = True
        else:
            color = "#51CF66"  # Vert pour les liens r√©pertori√©s
            width = 3
            dashes = False
        
        # Largeur proportionnelle √† la distance (invers√©e)
        distance = conn.get('distance', 5)
        width = max(1, 6 - distance)
        
        edge = Edge(
            source=conn['source'],
            target=conn['target'],
            color=color,
            width=width,
            dashes=dashes,
            label=f"Distance: {distance}",
            font={"size": 10}
        )
        edges.append(edge)
        edge_id += 1
    
    return nodes, edges

def create_plotly_network(data: Dict, show_private: bool = True, layout_type: str = "spring", max_distance: int = None):
    """
    Cr√©e un graphique r√©seau avec Plotly
    """
    # Cr√©er un graphe NetworkX
    G = nx.Graph()
    
    # Ajouter les n≈ìuds
    systems = data.get('systems', {})
    for system_name, system_data in systems.items():
        G.add_node(system_name, connections=system_data.get('connections_count', 0))
    
    # Ajouter les ar√™tes avec filtrage
    connections = data.get('connections', [])
    public_edges = []
    private_edges = []
    
    for conn in connections:
        is_private = conn.get('prive', False) or conn.get('status', '').lower().find('priv√©e') >= 0
        if is_private and not show_private:
            continue
        
        # Filtrer par distance si sp√©cifi√©
        distance = conn.get('distance', 5)
        if max_distance and distance > max_distance:
            continue
            
        G.add_edge(conn['source'], conn['target'], 
                  distance=distance,
                  private=is_private)
        
        if is_private:
            private_edges.append((conn['source'], conn['target']))
        else:
            public_edges.append((conn['source'], conn['target']))
    
    # Calculer les positions avec diff√©rents layouts
    if layout_type == "spring (Force-directed)":
        pos = nx.spring_layout(G, k=3, iterations=50)
    elif layout_type == "circular":
        pos = nx.circular_layout(G)
    elif layout_type == "kamada_kawai":
        pos = nx.kamada_kawai_layout(G)
    elif layout_type == "random":
        pos = nx.random_layout(G)
    else:
        pos = nx.spring_layout(G, k=3, iterations=50)
    
    # Pr√©parer les donn√©es pour Plotly
    edge_x_public = []
    edge_y_public = []
    edge_x_private = []
    edge_y_private = []
    
    # Ar√™tes publiques
    for edge in public_edges:
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x_public.extend([x0, x1, None])
        edge_y_public.extend([y0, y1, None])
    
    # Ar√™tes priv√©es
    for edge in private_edges:
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x_private.extend([x0, x1, None])
        edge_y_private.extend([y0, y1, None])
    
    # N≈ìuds
    node_x = []
    node_y = []
    node_text = []
    node_size = []
    
    for node in G.nodes():
        x, y = pos[node]
        node_x.append(x)
        node_y.append(y)
        connections = G.nodes[node].get('connections', 0)
        node_text.append(f"{node}<br>Connexions: {connections}")
        node_size.append(max(20, connections * 4))
    
    # Cr√©er le graphique
    fig = go.Figure()
    
    # Ajouter les ar√™tes publiques
    if edge_x_public:
        fig.add_trace(go.Scatter(
            x=edge_x_public, y=edge_y_public,
            mode='lines',
            line=dict(width=2, color='#51CF66'),
            hoverinfo='none',
            showlegend=True,
            name="Liens r√©pertori√©s"
        ))
    
    # Ajouter les ar√™tes priv√©es
    if edge_x_private:
        fig.add_trace(go.Scatter(
            x=edge_x_private, y=edge_y_private,
            mode='lines',
            line=dict(width=2, color='#FF6B6B', dash='dash'),
            hoverinfo='none',
            showlegend=True,
            name="Liens priv√©s"
        ))
    
    # Ajouter les n≈ìuds
    fig.add_trace(go.Scatter(
        x=node_x, y=node_y,
        mode='markers+text',
        marker=dict(
            size=node_size,
            color='#4A90E2',
            line=dict(width=2, color='white')
        ),
        text=[node for node in G.nodes()],
        textposition="middle center",
        textfont=dict(color="white", size=10),
        hoverinfo='text',
        hovertext=node_text,
        showlegend=True,
        name="Syst√®mes stellaires"
    ))
    
    fig.update_layout(
        title="R√©seau FTL - Univers d'Eneria",
        showlegend=True,
        hovermode='closest',
        margin=dict(b=20,l=5,r=5,t=40),
        annotations=[ dict(
            text="R√©seau de transport FTL entre les syst√®mes stellaires",
            showarrow=False,
            xref="paper", yref="paper",
            x=0.005, y=-0.002,
            xanchor='left', yanchor='bottom',
            font=dict(color="#888", size=12)
        )],
        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)'
    )
    
    return fig

def show_network_stats(data: Dict, show_private: bool = True, max_distance: int = None):
    """Affiche les statistiques du r√©seau"""
    if not data:
        return
    
    metadata = data.get('metadata', {})
    systems = data.get('systems', {})
    connections = data.get('connections', [])
    
    # Filtrer les connexions selon l'affichage et la distance
    if show_private:
        visible_connections = connections
    else:
        visible_connections = [c for c in connections if not (c.get('prive', False) or c.get('status', '').lower().find('priv√©e') >= 0)]
    
    # Filtrer par distance si sp√©cifi√©
    if max_distance:
        visible_connections = [c for c in visible_connections if c.get('distance', 5) <= max_distance]
    
    # Statistiques de base
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üåü Syst√®mes", len(systems))
    
    with col2:
        st.metric("üîó Connexions visibles", len(visible_connections))
    
    with col3:
        public_count = len([c for c in connections if not (c.get('prive', False) or c.get('status', '').lower().find('priv√©e') >= 0)])
        st.metric("üì° Liens r√©pertori√©s", public_count)
    
    with col4:
        private_count = len([c for c in connections if (c.get('prive', False) or c.get('status', '').lower().find('priv√©e') >= 0)])
        st.metric("üîí Liens priv√©s", private_count)
    
    # Statistiques avanc√©es
    if visible_connections:
        st.subheader("üìä Statistiques du r√©seau affich√©")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Syst√®mes les plus connect√©s
            st.write("**Hubs principaux:**")
            sorted_systems = sorted(systems.items(), key=lambda x: x[1].get('connections_count', 0), reverse=True)
            for i, (name, data) in enumerate(sorted_systems[:5]):
                st.write(f"{i+1}. **{name}** - {data.get('connections_count', 0)} connexions")
        
        with col2:
            # Distribution des distances
            distances = [c.get('distance', 0) for c in visible_connections]
            if distances:
                avg_distance = sum(distances) / len(distances)
                max_distance = max(distances)
                min_distance = min(distances)
                
                st.write("**Distances FTL:**")
                st.write(f"‚Ä¢ Moyenne: {avg_distance:.1f} UA")
                st.write(f"‚Ä¢ Maximum: {max_distance} UA")
                st.write(f"‚Ä¢ Minimum: {min_distance} UA")

def main():
    """Interface principale de la page r√©seau FTL"""
    st.title("üåå R√©seau FTL - Visualisation interactive")
    st.markdown("Exploration graphique des connexions de transport FTL entre les syst√®mes stellaires")
    
    # Charger les donn√©es
    data = load_ftl_data()
    if not data:
        st.stop()
    
    # Contr√¥les
    st.sidebar.title("‚öôÔ∏è Configuration")
    
    # Toggle pour les liens priv√©s
    show_private = st.sidebar.checkbox(
        "üîí Afficher les liens priv√©s", 
        value=True,
        help="Les liens priv√©s sont repr√©sent√©s en rouge et en pointill√©s"
    )
    
    # Type de visualisation
    viz_type = st.sidebar.selectbox(
        "üìä Type de visualisation",
        ["Plotly (Recommand√©)", "Agraph (Interactif)"],
        help="Plotly offre de meilleures performances pour les gros r√©seaux"
    )
    
    # Options de layout
    if viz_type == "Plotly (Recommand√©)":
        layout_type = st.sidebar.selectbox(
            "üéØ Layout du graphique",
            ["spring (Force-directed)", "circular", "kamada_kawai", "random"],
            help="Diff√©rents algorithmes de positionnement des n≈ìuds"
        )
    
    # Filtre par distance
    if data and data.get('connections'):
        distances = [c.get('distance', 5) for c in data['connections']]
        if distances:
            max_dist = max(distances)
            min_dist = min(distances)
            
            distance_filter = st.sidebar.slider(
                "üöÄ Distance maximale FTL",
                min_value=min_dist,
                max_value=max_dist,
                value=max_dist,
                help="Filtrer les connexions par distance maximale"
            )
    
    # Afficher les statistiques
    if 'distance_filter' in locals():
        show_network_stats(data, show_private, distance_filter)
    else:
        show_network_stats(data, show_private)
    
    st.markdown("---")
    
    # L√©gende
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**üé® L√©gende:**")
        st.markdown("üîµ **Syst√®mes stellaires** - Taille proportionnelle aux connexions")
    with col2:
        st.markdown("üü¢ **Liens r√©pertori√©s** - Connexions publiques connues")
        if show_private:
            st.markdown("üî¥ **Liens priv√©s** - Connexions secr√®tes ou non officielles")
    
    # Affichage du graphique
    st.subheader("üó∫Ô∏è Carte du r√©seau")
    
    if viz_type == "Plotly (Recommand√©)":
        # Graphique Plotly
        if 'distance_filter' in locals():
            fig = create_plotly_network(data, show_private, layout_type, distance_filter)
        else:
            fig = create_plotly_network(data, show_private, layout_type)
        st.plotly_chart(fig, use_container_width=True, height=600)
        
    else:
        # Graphique Agraph (plus interactif mais plus lourd)
        if 'distance_filter' in locals():
            nodes, edges = create_network_graph(data, show_private, distance_filter)
        else:
            nodes, edges = create_network_graph(data, show_private)
        
        config = Config(
            width=800,
            height=600,
            directed=False,
            physics=True,
            hierarchical=False,
            nodeHighlightBehavior=True,
            highlightColor="#F7A7A6",
            collapsible=False
        )
        
        if nodes and edges:
            agraph(nodes=nodes, edges=edges, config=config)
        else:
            st.warning("‚ö†Ô∏è Aucune donn√©e √† afficher avec les param√®tres actuels")
    
    # Informations techniques
    with st.expander("‚ÑπÔ∏è Informations techniques"):
        st.markdown(f"""
        **Source des donn√©es:** `univers_eneria_reseau_ftl.json`
        
        **Algorithme de positionnement:** Spring Layout (Force-directed)
        
        **Couleurs:**
        - üîµ Syst√®mes: Bleu (#4A90E2)
        - üü¢ Liens r√©pertori√©s: Vert (#51CF66) 
        - üî¥ Liens priv√©s: Rouge (#FF6B6B)
        
        **Taille des n≈ìuds:** Proportionnelle au nombre de connexions (20-60px)
        
        **Largeur des ar√™tes:** Inversement proportionnelle √† la distance FTL
        """)

if __name__ == "__main__":
    main()
